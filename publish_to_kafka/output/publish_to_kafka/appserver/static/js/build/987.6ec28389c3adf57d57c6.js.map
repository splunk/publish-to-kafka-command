{"version":3,"file":"987.6ec28389c3adf57d57c6.js","mappings":"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","sources":["webpack://@splunk/ucc_ui_lib/./src/components/CustomMenu.jsx","webpack://@splunk/ucc_ui_lib/./src/util/invariant.ts","webpack://@splunk/ucc_ui_lib/./src/components/MenuInput.tsx","webpack://@splunk/ucc_ui_lib/./src/pages/Input/InputPage.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { _ } from '@splunk/ui-utils/i18n';\nimport { getUnifiedConfigs } from '../util/util';\nimport { getBuildDirPath } from '../util/script';\n\nclass CustomMenu extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n        };\n        this.shouldRender = true;\n    }\n\n    componentDidMount() {\n        const unifiedConfigs = getUnifiedConfigs();\n        const { services, menu: customMenuField, groupsMenu } = unifiedConfigs.pages.inputs;\n        this.setState({ loading: true });\n        this.loadCustomMenu().then((Control) => {\n            const customControl = new Control(unifiedConfigs, this.el, this.setValue);\n            if (services && customMenuField && !groupsMenu) {\n                customControl.render();\n            }\n            this.setState({ loading: false });\n        });\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (!nextState.loading && this.shouldRender) {\n            this.shouldRender = false;\n            return true;\n        }\n        return false;\n    }\n\n    setValue = (newValue) => {\n        this.props.handleChange(newValue);\n    };\n\n    loadCustomMenu = () =>\n        new Promise((resolve) => {\n            if (this.props.type === 'external') {\n                import(\n                    /* webpackIgnore: true */ `${getBuildDirPath()}/custom/${\n                        this.props.fileName\n                    }.js`\n                ).then((external) => {\n                    const Control = external.default;\n                    resolve(Control);\n                });\n            } else {\n                const globalConfig = getUnifiedConfigs();\n                const appName = globalConfig.meta.name;\n                __non_webpack_require__(\n                    [`app/${appName}/js/build/custom/${this.props.fileName}`],\n                    (Control) => resolve(Control)\n                );\n            }\n        });\n\n    render() {\n        return (\n            <>\n                {this.state.loading && _('Loading...')}\n                <span\n                    ref={(el) => {\n                        this.el = el;\n                    }}\n                    style={{ visibility: this.state.loading ? 'hidden' : 'visible' }}\n                />\n            </>\n        );\n    }\n}\n\nCustomMenu.propTypes = {\n    fileName: PropTypes.string.isRequired,\n    type: PropTypes.string,\n    handleChange: PropTypes.func,\n};\n\nexport default CustomMenu;\n","const prefix = 'Invariant failed';\n\nexport function invariant(condition: unknown, message?: string): asserts condition {\n    if (condition) {\n        return;\n    }\n\n    const value = message ? `${prefix}: ${message}` : prefix;\n    throw new Error(value);\n}\n","import React, { useState, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dropdown from '@splunk/react-ui/Dropdown';\nimport Menu from '@splunk/react-ui/Menu';\nimport SlidingPanels from '@splunk/react-ui/SlidingPanels';\nimport ChevronLeft from '@splunk/react-icons/ChevronLeft';\nimport { _ as i18n } from '@splunk/ui-utils/i18n';\nimport styled from 'styled-components';\nimport { variables } from '@splunk/themes';\nimport { getFormattedMessage } from '../util/messageUtil';\nimport { getUnifiedConfigs } from '../util/util';\nimport CustomMenu from './CustomMenu';\nimport { StyledButton } from '../pages/EntryPageStyle';\nimport { invariant } from '../util/invariant';\n\nconst CustomSubTitle = styled.span`\n    color: ${variables.brandColorD20};\n    font-size: ${variables.fontSizeSmall};\n    font-weight: 500;\n`;\n\nexport const ROOT_GROUP_NAME = 'main_panel';\n\ninterface Group {\n    name: string;\n    hasSubmenu: boolean;\n    title: string;\n    subTitle?: string;\n}\n\ninterface CustomMenuType {\n    src: string;\n    type: string;\n}\n\ninterface MenuInputProps {\n    handleRequestOpen: (args: { serviceName: string; input?: string; groupName?: string }) => void;\n}\n\nfunction MenuInput({ handleRequestOpen }: MenuInputProps) {\n    const [activePanelId, setActivePanelId] = useState<string>(ROOT_GROUP_NAME);\n    const [slidingPanelsTransition, setSlidingPanelsTransition] = useState<'forward' | 'backward'>(\n        'forward'\n    );\n    const [openDropDown, setOpenDropDown] = useState(false);\n    const [isSubMenu, setIsSubMenu] = useState(true);\n\n    const { pages } = getUnifiedConfigs();\n\n    const { inputs } = pages;\n    invariant(inputs);\n    const groupsMenu = 'groupsMenu' in inputs ? inputs.groupsMenu : undefined;\n    const customMenuField = 'menu' in inputs ? inputs.menu : undefined;\n    const { services } = inputs;\n\n    const closeReasons = ['clickAway', 'escapeKey', 'offScreen', 'toggleClick'];\n    const toggle = (\n        <StyledButton\n            appearance=\"primary\"\n            id=\"addInputBtn\"\n            label={i18n('Create New Input')}\n            isMenu\n        />\n    );\n\n    useEffect(() => {\n        if (!isSubMenu) {\n            setOpenDropDown(false);\n            setIsSubMenu(true);\n        }\n    }, [isSubMenu]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    const handleRequestDropDownClose = ({ reason }: { reason: string }) => {\n        setOpenDropDown(!closeReasons.includes(reason));\n    };\n\n    const handleRequestDropDownOpen = () => {\n        setOpenDropDown(true);\n    };\n\n    const handleChangeCustomMenu = (val: { service: string; input: string }) => {\n        const { service, input } = val;\n        handleRequestOpen({ serviceName: service, input });\n    };\n\n    const getMenuItems = (serviceItems: Group[], groupName: string) =>\n        serviceItems.map((service: Group) =>\n            service?.hasSubmenu ? (\n                <Menu.Item\n                    hasSubmenu\n                    key={service.name}\n                    onClick={() => {\n                        setActivePanelId(service.name);\n                        setSlidingPanelsTransition('forward');\n                    }}\n                >\n                    {service.title}\n                </Menu.Item>\n            ) : (\n                <Menu.Item\n                    key={service.name}\n                    onClick={() => {\n                        handleRequestOpen({ serviceName: service.name, groupName });\n                        setIsSubMenu(false);\n                    }}\n                >\n                    {service.title}\n                    <CustomSubTitle>&nbsp;{service.subTitle}</CustomSubTitle>\n                </Menu.Item>\n            )\n        );\n\n    const getBackButton = () => (\n        <>\n            <Menu.Item\n                icon={<ChevronLeft />}\n                onClick={() => {\n                    setActivePanelId(ROOT_GROUP_NAME);\n                    setSlidingPanelsTransition('backward');\n                }}\n            >\n                Back\n            </Menu.Item>\n            <Menu.Divider />\n        </>\n    );\n\n    const getSlidingsPanels = (servicesGroup: Record<string, Group[]>) =>\n        Object.keys(servicesGroup).map((groupsName) => (\n            <SlidingPanels.Panel key={groupsName} panelId={groupsName}>\n                <Menu>\n                    {groupsName !== ROOT_GROUP_NAME && getBackButton()}\n                    {getMenuItems(servicesGroup[groupsName], groupsName)}\n                </Menu>\n            </SlidingPanels.Panel>\n        ));\n\n    const getInputMenu = useMemo(() => {\n        const servicesGroup: Record<string, Group[]> = { [ROOT_GROUP_NAME]: [] };\n        if (groupsMenu) {\n            groupsMenu.forEach((group) => {\n                if (group?.groupServices) {\n                    servicesGroup[group.groupName] = [];\n                    group.groupServices.forEach((serviceName: string) => {\n                        servicesGroup[group.groupName].push({\n                            name: serviceName,\n                            hasSubmenu: false,\n                            title:\n                                services.find((service) => service.name === serviceName)?.title ||\n                                '', // what should be done when title empty\n                            subTitle: services.find((service) => service.name === serviceName)\n                                ?.subTitle,\n                        });\n                    });\n                    servicesGroup[ROOT_GROUP_NAME].push({\n                        name: group.groupName,\n                        title: group.groupTitle,\n                        hasSubmenu: true,\n                    });\n                } else {\n                    servicesGroup[ROOT_GROUP_NAME].push({\n                        name: group.groupName,\n                        title: group.groupTitle,\n                        subTitle: services.find((service) => service.name === group.groupName)\n                            ?.subTitle,\n                        hasSubmenu: false,\n                    });\n                }\n            });\n        } else {\n            servicesGroup[ROOT_GROUP_NAME] = services.map((service) => ({\n                name: service.name,\n                title: service.title,\n                subTitle: service.subTitle,\n                hasSubmenu: false,\n            }));\n        }\n        return getSlidingsPanels(servicesGroup);\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    // Making a dropdown if we have more than one service\n    const makeSingleSelectDropDown = () => (\n        <Dropdown\n            toggle={toggle}\n            open={openDropDown}\n            onRequestClose={handleRequestDropDownClose}\n            onRequestOpen={handleRequestDropDownOpen}\n        >\n            <SlidingPanels\n                activePanelId={activePanelId}\n                transition={slidingPanelsTransition}\n                style={{ width: '210px' }}\n            >\n                {getInputMenu}\n            </SlidingPanels>\n        </Dropdown>\n    );\n\n    // Making a dropdown if we have one service\n    const makeInputButton = () => (\n        <StyledButton\n            label={getFormattedMessage(100)}\n            appearance=\"primary\"\n            id=\"addInputBtn\"\n            onClick={() => {\n                handleRequestOpen({ serviceName: services[0].name });\n            }}\n        />\n    );\n\n    // Making a custom menu\n    const makeCustomMenu = (menu: CustomMenuType) => (\n        <>\n            {React.createElement(CustomMenu, {\n                fileName: menu.src,\n                type: menu.type,\n                handleChange: handleChangeCustomMenu,\n            })}\n        </>\n    );\n\n    const getCustomMenuAndGroupsMenu = (menu: CustomMenuType) => (\n        <>\n            {React.createElement(CustomMenu, {\n                fileName: menu.src,\n                type: menu.type,\n                handleChange: handleChangeCustomMenu,\n            })}\n            {services.length === 1 ? makeInputButton() : makeSingleSelectDropDown()}\n        </>\n    );\n\n    if (services && !customMenuField?.src) {\n        return services.length === 1 ? makeInputButton() : makeSingleSelectDropDown();\n    }\n\n    // Introducing a condition to enable simultaneous support for custom menu src and Groups Menu.\n    // ADDON-62948\n    if (services && customMenuField?.src && groupsMenu) {\n        return getCustomMenuAndGroupsMenu(customMenuField);\n    }\n    invariant(customMenuField);\n    return makeCustomMenu(customMenuField);\n}\n\nMenuInput.propTypes = {\n    handleRequestOpen: PropTypes.func,\n};\n\nexport default MenuInput;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nimport ColumnLayout from '@splunk/react-ui/ColumnLayout';\nimport styled from 'styled-components';\nimport ToastMessages from '@splunk/react-toast-notifications/ToastMessages';\nimport TabBar from '@splunk/react-ui/TabBar';\nimport { _ } from '@splunk/ui-utils/i18n';\nimport { getUnifiedConfigs } from '../../util/util';\nimport { TitleComponent, SubTitleComponent } from './InputPageStyle';\nimport { TableContextProvider } from '../../context/TableContext';\nimport { MODE_CREATE, MODE_CLONE, MODE_EDIT } from '../../constants/modes';\nimport { PAGE_INPUT } from '../../constants/pages';\nimport { STYLE_PAGE } from '../../constants/dialogStyles';\nimport MenuInput, { ROOT_GROUP_NAME } from '../../components/MenuInput';\nimport TableWrapper from '../../components/table/TableWrapper';\nimport EntityModal from '../../components/EntityModal/EntityModal';\nimport ErrorBoundary from '../../components/ErrorBoundary';\nimport EntityPage from '../../components/EntityPage';\nimport useQuery from '../../hooks/useQuery';\n\nconst Row = styled(ColumnLayout.Row)`\n    padding: 5px 0px;\n\n    .title_menu_column {\n        width: auto !important;\n    }\n\n    .page_subtitle {\n        min-height: 20px;\n    }\n\n    .dropdown {\n        text-align: right;\n    }\n`;\n\nfunction InputPage() {\n    const [entity, setEntity] = useState({ open: false });\n    const unifiedConfigs = getUnifiedConfigs();\n    const { services, title, table, description } = unifiedConfigs.pages.inputs;\n\n    // check if the tabs feature is enabled or not.\n    const isTabs = !table;\n\n    const [activeTabId, setActiveTabId] = useState(services[0].name);\n    const selectedTab = services.find((x) => x.name === activeTabId);\n\n    const PERMITTED_MODES = [MODE_CLONE, MODE_CREATE, MODE_EDIT];\n    const permittedTabNames = services.map((service) => service.name);\n\n    const navigate = useNavigate();\n    const query = useQuery();\n\n    useEffect(() => {\n        // eslint-disable-next-line no-use-before-define\n        setServiceEntity();\n        // eslint-disable-next-line no-use-before-define\n        setActiveTab();\n    }, [useLocation().search]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    const setServiceEntity = () => {\n        const service = services.find((x) => x.name === query.get('service'));\n        // Run only when service and action/mode is valid and modal/page is not open\n        if (query && service && PERMITTED_MODES.includes(query.get('action')) && !entity.open) {\n            // run when mode is not create and previous state info is available\n            if (query.get('action') !== MODE_CREATE && entity.stanzaName) {\n                setEntity({\n                    ...entity,\n                    open: true,\n                    isInputPageStyle: true,\n                    serviceName: query.get('service'),\n                    mode: query.get('action'),\n                });\n            } else {\n                // If previous state information is unavailable, create mode will be used by default\n                setEntity({\n                    ...entity,\n                    open: true,\n                    isInputPageStyle: true,\n                    serviceName: query.get('service'),\n                    formLabel: `Create ${service?.title}`,\n                    mode: MODE_CREATE,\n                });\n            }\n        } else if (\n            (!query.get('service') || !query.get('action')) &&\n            entity.open &&\n            entity.isInputPageStyle\n        ) {\n            // Close page when any of the required query params are not provided\n            setEntity({ ...entity, open: false });\n        }\n    };\n\n    const setActiveTab = () => {\n        if (query && permittedTabNames.includes(query.get('service'))) {\n            setActiveTabId(query.get('service'));\n        }\n    };\n\n    // handle modal/page open request on create/add entity button\n    const handleRequestOpen = ({ serviceName, groupName, input }) => {\n        const service = services.find((x) => x.name === serviceName);\n        const serviceTitle = service.title;\n        const isInputPageStyle = service.style === STYLE_PAGE;\n\n        setEntity({\n            ...entity,\n            open: true,\n            serviceName,\n            mode: MODE_CREATE,\n            formLabel: `Add ${serviceTitle}`,\n            isInputPageStyle,\n            groupName,\n        });\n        if (isInputPageStyle) {\n            // set query and push to navigate\n            query.set('service', serviceName);\n            query.set('action', MODE_CREATE);\n            const selectedGroup = groupName && groupName !== ROOT_GROUP_NAME ? groupName : null;\n            const inputQueryValue = input || selectedGroup || serviceName;\n            if (inputQueryValue) {\n                query.set('input', inputQueryValue);\n            } else {\n                query.delete('input');\n            }\n            navigate({ search: query.toString() });\n        }\n    };\n\n    // handle close/cancel/back request in add/create modal component\n    const handleModalDialogClose = () => {\n        setEntity({ ...entity, open: false });\n    };\n\n    // generate modal style dialog\n    const generateModalDialog = () => (\n        <EntityModal\n            page={PAGE_INPUT}\n            open={entity.open}\n            handleRequestClose={handleModalDialogClose}\n            serviceName={entity.serviceName}\n            mode={MODE_CREATE}\n            formLabel={entity.formLabel}\n            groupName={entity.groupName}\n        />\n    );\n\n    // handle clone/edit request per row from table for page style dialog\n    const handleOpenPageStyleDialog = (row, mode) => {\n        const label = services.find((x) => x.name === row.serviceName)?.title;\n        setEntity({\n            ...entity,\n            open: true,\n            isInputPageStyle: true,\n            serviceName: row.serviceName,\n            stanzaName: row.name,\n            formLabel: mode === MODE_CLONE ? `Clone ${label}` : `Update ${label}`,\n            mode,\n        });\n        // set query and push to history\n        query.set('service', row.serviceName);\n        query.set('action', mode);\n        navigate({ search: query.toString() });\n    };\n\n    // handle close request for page style dialog\n    const handlePageDialogClose = () => {\n        setEntity({ ...entity, open: false });\n        if (!isTabs) {\n            query.delete('service');\n        }\n        query.delete('action');\n        navigate({ search: query.toString() });\n    };\n\n    // generate page style dialog\n    const generatePageDialog = () => (\n        <EntityPage\n            open={entity.open}\n            handleRequestClose={handlePageDialogClose}\n            serviceName={entity.serviceName}\n            stanzaName={entity.stanzaName}\n            mode={entity.mode}\n            formLabel={entity.formLabel}\n            page={PAGE_INPUT}\n            groupName={entity.groupName}\n        />\n    );\n\n    const onTabChange = useCallback(\n        (e, { selectedTabId }) => {\n            setActiveTabId(selectedTabId);\n            query.delete('action');\n            query.set('service', selectedTabId);\n            navigate({ search: query.toString() });\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        },\n        [activeTabId] // eslint-disable-line react-hooks/exhaustive-deps\n    );\n\n    return (\n        <ErrorBoundary>\n            <TableContextProvider value={null}>\n                {entity.isInputPageStyle && entity.open ? generatePageDialog() : null}{' '}\n                <div\n                    style={\n                        entity.isInputPageStyle && entity.open\n                            ? { display: 'none' }\n                            : { display: 'block' }\n                    }\n                >\n                    <ColumnLayout gutter={8}>\n                        <Row>\n                            <ColumnLayout.Column className={isTabs && 'title_menu_column'} span={9}>\n                                <TitleComponent>\n                                    {isTabs ? _(selectedTab.title) : _(title || '')}\n                                </TitleComponent>\n                                <SubTitleComponent className={isTabs && 'page_subtitle'}>\n                                    {isTabs ? _(selectedTab.description) : _(description || '')}\n                                </SubTitleComponent>\n                            </ColumnLayout.Column>\n                            <ColumnLayout.Column\n                                className={isTabs ? 'title_menu_column' : 'dropdown'}\n                                span={3}\n                            >\n                                {!isTabs && <MenuInput handleRequestOpen={handleRequestOpen} />}\n                            </ColumnLayout.Column>\n                        </Row>\n                    </ColumnLayout>\n                    {isTabs ? (\n                        <>\n                            <TabBar activeTabId={activeTabId} onChange={onTabChange}>\n                                {services.map((service) => (\n                                    <TabBar.Tab\n                                        key={service.name}\n                                        label={_(service.title)}\n                                        tabId={service.name}\n                                    />\n                                ))}\n                            </TabBar>\n                            {services.map((service) => (\n                                <div\n                                    key={service.name}\n                                    style={\n                                        service.name !== activeTabId\n                                            ? { display: 'none' }\n                                            : { display: 'block' }\n                                    }\n                                    id={`${service.name}Tab`}\n                                >\n                                    <TableWrapper\n                                        page={PAGE_INPUT}\n                                        serviceName={service.name}\n                                        handleRequestModalOpen={() =>\n                                            handleRequestOpen({ serviceName: service.name })\n                                        }\n                                        handleOpenPageStyleDialog={handleOpenPageStyleDialog}\n                                    />\n                                </div>\n                            ))}\n                        </>\n                    ) : (\n                        <TableWrapper\n                            page={PAGE_INPUT}\n                            handleOpenPageStyleDialog={handleOpenPageStyleDialog}\n                            displayActionBtnAllRows\n                        />\n                    )}\n\n                    <ToastMessages position=\"top-right\" />\n                    {!entity.isInputPageStyle && entity.open ? generateModalDialog() : null}\n                </div>\n            </TableContextProvider>\n        </ErrorBoundary>\n    );\n}\n\nexport default InputPage;\n"],"names":["CustomMenu","_Component","_inherits","_super","props","_this","_classCallCheck","_defineProperty","_assertThisInitialized","call","newValue","handleChange","Promise","resolve","type","import","concat","getBuildDirPath","fileName","then","external","Control","appName","getUnifiedConfigs","meta","name","__non_webpack_require__","state","loading","shouldRender","key","value","_this2","unifiedConfigs","_unifiedConfigs$pages","pages","inputs","services","customMenuField","menu","groupsMenu","this","setState","loadCustomMenu","customControl","el","setValue","render","nextProps","nextState","_this3","React","_","ref","style","visibility","Component","propTypes","PropTypes","isRequired","prefix","invariant","condition","message","Error","CustomSubTitle","styled","span","_templateObject","variables","brandColorD20","fontSizeSmall","ROOT_GROUP_NAME","MenuInput","_ref","handleRequestOpen","_useState2","_slicedToArray","useState","activePanelId","setActivePanelId","_useState4","slidingPanelsTransition","setSlidingPanelsTransition","_useState6","openDropDown","setOpenDropDown","_useState8","isSubMenu","setIsSubMenu","undefined","closeReasons","toggle","StyledButton","appearance","id","label","i18n","isMenu","useEffect","handleRequestDropDownClose","_ref2","reason","includes","handleRequestDropDownOpen","handleChangeCustomMenu","val","service","input","serviceName","getInputMenu","useMemo","servicesGroup","forEach","group","_services$find3","groupServices","groupName","_services$find","_services$find2","push","hasSubmenu","title","find","subTitle","groupTitle","map","Object","keys","groupsName","SlidingPanels","panelId","Menu","icon","ChevronLeft","onClick","serviceItems","getSlidingsPanels","makeSingleSelectDropDown","Dropdown","open","onRequestClose","onRequestOpen","transition","width","makeInputButton","getFormattedMessage","src","length","makeCustomMenu","Row","ColumnLayout","_taggedTemplateLiteral","entity","setEntity","table","description","isTabs","activeTabId","setActiveTabId","selectedTab","x","PERMITTED_MODES","MODE_CLONE","MODE_CREATE","MODE_EDIT","permittedTabNames","navigate","useNavigate","query","useQuery","setServiceEntity","setActiveTab","useLocation","search","get","stanzaName","_objectSpread","isInputPageStyle","mode","formLabel","serviceTitle","STYLE_PAGE","set","inputQueryValue","toString","handleOpenPageStyleDialog","row","onTabChange","useCallback","e","selectedTabId","ErrorBoundary","TableContextProvider","EntityPage","handleRequestClose","page","PAGE_INPUT","display","gutter","className","TitleComponent","SubTitleComponent","TabBar","onChange","tabId","TableWrapper","handleRequestModalOpen","displayActionBtnAllRows","ToastMessages","position","EntityModal"],"sourceRoot":""}